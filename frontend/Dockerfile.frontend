# syntax=docker/dockerfile:1.6

FROM node:20-bullseye AS builder
WORKDIR /app

# Install dependencies without running lifecycle scripts (postinstall)
COPY package*.json ./
RUN --mount=type=cache,target=/root/.npm sh -c "if [ -f package-lock.json ]; then npm ci --legacy-peer-deps --no-audit --no-fund --ignore-scripts; else npm install --legacy-peer-deps --no-audit --no-fund --ignore-scripts; fi"

# Copy full source (includes scripts/ and openapi.json)
COPY . .

# Fetch OpenAPI spec if script exists (otherwise use committed openapi.json) and generate client
RUN sh -c 'if [ -f scripts/fetch_openapi.js ]; then node scripts/fetch_openapi.js || echo "fetch_openapi failed, using existing openapi.json"; else echo "No fetch_openapi.js, using existing openapi.json"; fi' \
    && npm run codegen \
    && npm run build

FROM nginx:1.27-alpine AS runtime
WORKDIR /usr/share/nginx/html

# Copy built frontend
COPY --from=builder /app/dist/ ./

# Provide default OpenAPI spec file path for the app to discover BASE
COPY openapi.json /usr/share/nginx/html/openapi.json

# Nginx config will be provided via separate file to handle SPA fallback and proxy
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80 5173
CMD ["nginx", "-g", "daemon off;"]


