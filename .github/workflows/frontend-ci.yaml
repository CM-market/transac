name: Frontend CI

on:
  pull_request:

jobs:
  # === FRONTEND JOBS ===
  openapi_codegen:
    name: OpenAPI Codegen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
        working-directory: frontend
      - name: Generate OpenAPI client
        run: npm run codegen
        working-directory: frontend
      - name: Cache api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}

  frontend_install:
    name: Frontend Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Dependencies
        run: npm ci
        working-directory: frontend
      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}

  frontend_build:
    name: Frontend Build
    needs: [frontend_install, openapi_codegen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Restore api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}
      - name: Build
        run: npm run build
        working-directory: frontend

  frontend_lint:
    name: Frontend Lint
    needs: [frontend_install, openapi_codegen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Restore api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}
      - name: ESLint
        run: npm run lint:check
        working-directory: frontend

  frontend_prettier:
    name: Frontend Prettier
    needs: [frontend_install, openapi_codegen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Restore api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}
      - name: Prettier
        run: npm run prettier:check
        working-directory: frontend

  frontend_typescript:
    name: Frontend TypeScript
    needs: [frontend_install, openapi_codegen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Restore api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}
      - name: TypeScript
        run: npm run ts:check
        working-directory: frontend

  frontend_unit_tests:
    name: Frontend Unit Tests
    needs: [frontend_install, openapi_codegen]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cached node modules
        uses: actions/cache@v4
        with:
          path: frontend/node_modules
          key: ${{ github.sha }}
      - name: Restore api generated files
        uses: actions/cache@v4
        with:
          path: frontend/src/openapi-rq
          key: ${{ github.sha }}
      - name: Unit tests
        run: npm run test:unit
        working-directory: frontend
      - name: Generate Coverage Report
        run: npm run coverage
        working-directory: frontend
      - name: Upload coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: frontend/coverage
  # frontend_sonarqube:
  #   name: Frontend SonarQube Analysis
  #   needs: [ frontend_build, frontend_unit_tests ]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #     with:
  #       fetch-depth: 0
  #   - name: Download coverage Report
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: coverage-report
  #       path: coverage
  #   - uses: sonarsource/sonarqube-scan-action@v3
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     with:
  #       args: |
  #         -Dsonar.projectKey=DGAT-sustainability
  #         -Dsonar.source=src
  #         -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
  #         -Dsonar.qualitygate.wait=true
  #   - uses: sonarsource/sonarqube-quality-gate-action@master
  #     timeout-minutes: 5
  #     env:
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
